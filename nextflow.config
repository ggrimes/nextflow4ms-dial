/**
    A Nextflow-based reproducible pipeline for untargeted metabolomics data analysis
    Description  : This file in the configuration of nextflow4ms-dial, including resource allocation and parameters information
    Author       : Xinsong Du
    Creation Date: 11/01/2022
    License      : MIT License
          
    This script is free software: you can redistribute it and/or modify
    it under the terms of the MIT License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.
    
    This script is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
    MIT License for more details.
    
    You should have received a copy of the MIT License
    along with this script.  If not, see <https://opensource.org/licenses/MIT>.
    
    For any bugs or problems found, please contact us at
    - xinsongdu@ufl.edu (or xinsongdu@gmail.com), djlemas@ufl.edu
*/

manifest {
  name = 'nextflow4ms-dial'
  author = 'Xinsong Du, Dominick Lemas'
  homePage = 'https://github.com/Nextflow4Metabolomics/nextflow4ms-dial'
  description = 'A Nextflow-based reproducible pipeline for untargeted metabolomics data analysis'
  mainScript = 'main.nf'
  nextflowVersion = '>=20.04.0'
  version = '1.0dev'
}

workflow.onComplete = {
    // any workflow property can be used here
    println "Pipeline complete, writing success report to file ./logs/success_report.txt"
    println "Command line: $workflow.commandLine"
    File file = new File("./logs/success_report.txt")
    file.write("$workflow.success")
}

workflow.onError = {
    println "Oops .. something went wrong, exit status: $workflow.exitStatus\nWriting error message to file ./logs/error.txt"
    File file = new File("./logs/error.txt")
    file.write("$workflow.errorReport")
}

params
{

    // Workflow information
    name = "A Nextflow-based reproducible pipeline for untargeted metabolomics data analysis"
    input = "mzML files"

    // Output help information
    help = null

    // output directory
    outdir = "./results"

    // outputs for dependency information
    dependencies = "dependencies.txt"

    // authors' profiles
    config_profile_description = false
    config_profile_contact = false
    config_profile_url = false
    email = false
    email_on_fail = false

    // nf-core variables
    tracedir = "${params.outdir}/pipeline_info"

}

timeline {
  enabled = true
  file = "${params.tracedir}/execution_timeline.html"
  overwrite = true
}
report {
  enabled = true
  file = "${params.tracedir}/execution_report.html"
  overwrite = true
}
trace {
  enabled = true
  file = "${params.tracedir}/execution_trace.txt"
  overwrite = true
}
dag {
  enabled = true
  file = "${params.tracedir}/pipeline_dag.svg"
  overwrite = true
}

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

profiles {
  docker {
    docker.enabled = true
    docker.runOptions = '-u \$(id -u):\$(id -g)'
    includeConfig 'conf/base.config'
  }
  singularity {
    singularity.enabled = true
    singularity.autoMounts = true
    includeConfig 'conf/HiPerGator.config'
    singularity.cacheDir = "./tmp/"
  }
  functional_test {
    docker.enabled = true
    docker.runOptions = '-u \$(id -u):\$(id -g)'
    includeConfig 'conf/functional_test.config'
  }
  ci_test { 
    docker.enabled = true
    docker.runOptions = '-u \$(id -u):\$(id -g)'
    includeConfig 'conf/ci_test.config'
  }
  eddie {
    //Profile config names for nf-core/configs
    params {
        config_profile_description = 'University of Edinburgh (eddie) cluster profile provided by nf-core/configs.'
        config_profile_contact     = 'Graeme Grimes (@ggrimes)'
        config_profile_url         = 'https://www.ed.ac.uk/information-services/research-support/research-computing/ecdf/high-performance-computing'
    }
    
    executor {
        name = "sge"
    }
    
    process {
        resourceLimits = [
            memory: 384.GB,
            cpus: 32,
            time: 240.h
        ]
        clusterOptions = { task.memory ? "-l h_vmem=${task.memory.bytes / task.cpus}" : null }
        stageInMode    = 'symlink'
        scratch        = 'false'
        penv           = { task.cpus > 1 ? "sharedmem" : null }
    
        // common SGE error statuses
        errorStrategy  = { task.exitStatus in [143, 137, 104, 134, 139, 140] ? 'retry' : 'finish' }
        maxErrors      = '-1'
        maxRetries     = 3
    
        beforeScript   = '''
        . /etc/profile.d/modules.sh
        module load singularity
        export SINGULARITY_TMPDIR="$TMPDIR"
        '''
    }
    
    params {
        // iGenomes reference base
        igenomes_base = '/exports/igmm/eddie/BioinformaticsResources/igenomes'
        max_memory    = 384.GB
        max_cpus      = 32
        max_time      = 240.h
    }
    
    env {
        MALLOC_ARENA_MAX = 1
    }
    
    singularity {
        envWhitelist = "SINGULARITY_TMPDIR,TMPDIR"
        runOptions   = '-p --scratch /dev/shm -B "$TMPDIR"'
        enabled      = true
        autoMounts   = true
        cacheDir     = "/exports/igmm/eddie/BioinformaticsResources/nfcore/singularity-images"
    }
  }
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
